#!/bin/bash
# Copyright Narayan Newton <nnewton@tag1consulting.com>
# RSYNC Mirror Script

LOCKDIR=/tmp
DESTDIR=/mnt/files2
SOURCEDIR=/mnt/files

MASTER_HOSTS=( "host1", "host2", "host3" )

MY_HOSTNAME="`hostname -f`"

RSYNC_SSH_OPTIONS='-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'

#cleanup old lock files, older than 30 minutes
find /tmp/rsync.lock -mmin +30 -exec rm {} \ &>/dev/null


if [ ! -f ${LOCKDIR}/rsync.lock ]; then
    echo $$ > ${LOCKDIR}/rsync.lock
    echo ${MY_HOSTNAME} >> ${LOCKDIR}/rsync.lock
elif [ -z "`cat ${LOCKDIR}/rsync.lock} | grep ${MY_HOSTNAME}`" ]; then
    exit 0 #The lock file exists and isnt owned by my host
else
    CURRENTPID=`head -n1 ${LOCKDIR}/rsync.lock`
    #Check if the PID is alive, we do this by sending SIG 0, which does nothing
    kill -0 ${CURRENTPID} &> /dev/null
    if [ $? -ne 0 ]; then
      echo $$ > ${LOCKDIR}/rsync.lock
    #Check if we are the process that grabbed the lock, if we arnt and the above test already passed, exit
    elif [ ${CURRENTPID} -ne $$ ]; then
        exit 0
    fi
fi

for host in $MASTER_HOSTS; do
  nc -z -w1 $host 22
  if [ $? -eq 0 ]; then
    rsync -avz -e "ssh ${RSYNC_SSH_OPTIONS}" ${MASTER_HOST}:${SOURCEDIR}/ ${DESTDIR}/
    rm -f ${LOCKDIR}/rsync.lock
    exit 0
  fi
done


rm -f ${LOCKDIR}/rsync.lock
echo "All source hosts down"
exit 1
